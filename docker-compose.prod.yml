version: "3.9"

services:
  # Builder сервис - генерирует CBMA14.json
  builder:
    build:
      context: .
      dockerfile: Dockerfile.builder
    volumes:
      - ./data:/data
      - ./logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
    command: |
      bash -c "
        python /app/build_index.py
        echo 'Initial build complete. Starting hourly scheduler...'
        while true; do
          sleep 3600
          python /app/build_index.py
          echo 'Index updated at $(date)'
        done
      "
    restart: unless-stopped
    networks:
      - cbma14_network

  # UDF сервер на Flask
  udf:
    build:
      context: .
      dockerfile: Dockerfile.udf
    volumes:
      - ./data:/data:ro
      - ./logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - FLASK_ENV=production
      - COINGLASS_API_KEY=${COINGLASS_API_KEY}
    expose:
      - "8000"
    command: gunicorn --bind 0.0.0.0:8000 --workers 4 --worker-class sync --timeout 60 --keep-alive 2 --max-requests 1000 --preload src.udf.server:app
    restart: unless-stopped
    depends_on:
      - builder
    networks:
      - cbma14_network

  # Nginx reverse proxy
  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./src/chart:/usr/share/nginx/html:ro
      - ./logs/nginx:/var/log/nginx
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    depends_on:
      - udf
    networks:
      - cbma14_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot для SSL сертификатов
  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - cbma14_network

  # Мониторинг контейнеров (опционально)
  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=3600
    restart: unless-stopped
    networks:
      - cbma14_network

volumes:
  certbot_data:
    driver: local
  certbot_www:
    driver: local

networks:
  cbma14_network:
    driver: bridge 