//@version=6
indicator("Композитный Индекс Рейтингов (Embedded)", shorttitle="App-Rank Embedded", overlay=true, scale=scale.right)

// ═══════════════════════════════════════════════════════════════════════
// ПАРАМЕТРЫ ИНДИКАТОРА
// ═══════════════════════════════════════════════════════════════════════

// Основные настройки
scaleFactor = input.float(100., title="Scale factor", tooltip="Масштаб композита для сопоставления с ценой", minval=0.1)
offset      = input.float(0., title="Vertical shift", tooltip="Вертикальный сдвиг композита")
showRaw = input.bool(false, title="Показать сырой ранг?", tooltip="Отображать ли сырые данные композитного ранга")
showBTC = input.bool(true, title="Показать цену BTC?", tooltip="Отображать ли цену Bitcoin")

// Визуальные настройки
compColor = input.color(color.red, title="Цвет MA композита", group="Цвета")
rawColor = input.color(color.orange, title="Цвет сырого ранга", group="Цвета") 
btcColor = input.color(color.blue, title="Цвет BTC", group="Цвета")

// ═══════════════════════════════════════════════════════════════════════
// ВСТРОЕННЫЕ ДАННЫЕ (обновлено: 2025-07-01 12:22 UTC)
// ═══════════════════════════════════════════════════════════════════════

// Временные метки (Unix ms)
var ma_times = array.from(
     1704067200000, 1704153600000, 1704240000000, 1704326400000, 1704412800000, 1704499200000, 1704585600000, 1704672000000, 1704758400000, 1704844800000, 1704931200000, 1705017600000, 1705104000000, 1705190400000, 1705276800000, 1705363200000, 1705449600000, 1705536000000, 1705622400000, 1705708800000,
     1705795200000, 1705881600000, 1705968000000, 1706054400000, 1706140800000, 1706227200000, 1706313600000, 1706400000000, 1706486400000, 1706572800000, 1706659200000)

// Значения MA композита
var ma_values = array.from(
     258.51, 266.81, 259.89, 254.83, 255.9, 257.31, 258.14, 259.97, 257.98, 260.12, 265.27, 266.01, 268.08, 269.63, 270.0, 274.29, 274.58, 275.4, 276.12, 278.45,
     279.86, 281.0, 279.87, 285.23, 288.27, 290.42, 290.15, 290.22, 292.26, 293.99, 294.85)

// Временные метки для сырых данных
var raw_times = array.from(
     1704067200000, 1704153600000, 1704240000000, 1704326400000, 1704412800000, 1704499200000, 1704585600000, 1704672000000, 1704758400000, 1704844800000, 1704931200000, 1705017600000, 1705104000000, 1705190400000, 1705276800000, 1705363200000, 1705449600000, 1705536000000, 1705622400000, 1705708800000,
     1705795200000, 1705881600000, 1705968000000, 1706054400000, 1706140800000, 1706227200000, 1706313600000, 1706400000000, 1706486400000, 1706572800000, 1706659200000)

// Сырые значения композита
var raw_values = array.from(
     258.51, 275.11, 246.04, 239.66, 260.16, 264.35, 263.13, 271.36, 261.17, 260.98, 275.78, 265.34, 278.84, 273.93, 273.96, 291.2, 263.05, 281.46, 270.44, 295.14,
     283.78, 281.93, 283.29, 300.57, 302.71, 285.51, 293.28, 284.22, 296.21, 295.46, 306.59)

// ═══════════════════════════════════════════════════════════════════════
// ФУНКЦИЯ ИНТЕРПОЛЯЦИИ ДАННЫХ
// ═══════════════════════════════════════════════════════════════════════

// Находит значение для текущего бара по временной метке
get_value_at_time(times_array, values_array, current_time) =>
    result = float(na)
    array_size = array.size(times_array)
    
    if array_size > 0
        // Бинарный поиск ближайшей временной метки
        left = 0
        right = array_size - 1
        
        while left <= right
            mid = math.floor((left + right) / 2)
            mid_time = array.get(times_array, mid)
            
            if mid_time == current_time
                result := array.get(values_array, mid)
                break
            else if mid_time < current_time
                left := mid + 1
            else
                right := mid - 1
        
        // Если точного совпадения нет, берем ближайшее предыдущее значение
        if na(result) and right >= 0
            result := array.get(values_array, right)
    
    result

// ═══════════════════════════════════════════════════════════════════════
// ПОЛУЧЕНИЕ ДАННЫХ
// ═══════════════════════════════════════════════════════════════════════

// Текущее время бара в миллисекундах
current_time_ms = time

// Получаем значения для текущего бара
compMA = get_value_at_time(ma_times, ma_values, current_time_ms)
compRaw = showRaw ? get_value_at_time(raw_times, raw_values, current_time_ms) : na

// Масштабирование
compMA_scaled = compMA * scaleFactor + offset
compRaw_scaled = showRaw ? compRaw * scaleFactor + offset : na

// Цена BTC
btcPrice = showBTC ? request.security("BINANCE:BTCUSDT", timeframe.period, close) : na

// ═══════════════════════════════════════════════════════════════════════
// ОТРИСОВКА ГРАФИКОВ
// ═══════════════════════════════════════════════════════════════════════

// Основная линия композитного MA
plot(compMA_scaled, 
     title="Композитный MA", 
     color=compColor, 
     linewidth=2, 
     display=display.all)

// Сырые данные композита (если включено)
plot(compRaw_scaled, 
     title="Сырой композитный ранг", 
     color=rawColor, 
     linewidth=1, 
     display=display.all)

// Цена Bitcoin
plot(btcPrice, 
     title="BTC Price", 
     color=btcColor, 
     linewidth=2, 
     display=display.all)

// ═══════════════════════════════════════════════════════════════════════
// ИНФОРМАЦИОННАЯ ПАНЕЛЬ
// ═══════════════════════════════════════════════════════════════════════

if barstate.islast
    var table infoTable = table.new(position.top_right, 2, 4, bgcolor=color.new(color.white, 80))
    
    table.cell(infoTable, 0, 0, "Данные обновлены", text_color=color.gray, text_size=size.small)
    table.cell(infoTable, 1, 0, "01.07.2025", text_color=color.gray, text_size=size.small)
    
    table.cell(infoTable, 0, 1, "Записей MA", text_color=color.gray, text_size=size.small)
    table.cell(infoTable, 1, 1, str.tostring(array.size(ma_values)), text_color=color.gray, text_size=size.small)
    
    if not na(compMA)
        table.cell(infoTable, 0, 2, "Текущий MA", text_color=color.black, text_size=size.small)
        table.cell(infoTable, 1, 2, str.tostring(compMA, "#.##"), text_color=color.black, text_size=size.small)
        
        table.cell(infoTable, 0, 3, "Масштаб", text_color=color.gray, text_size=size.small)
        table.cell(infoTable, 1, 3, str.tostring(compMA_scaled, "#.##"), text_color=color.gray, text_size=size.small)
