/**
 * Indicators Manager for CBMA14 Project
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –Ω–∞ Lightweight Charts
 */

class IndicatorsManager {
    
    constructor(chart) {
        this.chart = chart;
        this.indicators = new Map();
        this.data = [];
        this.activeIndicators = new Set();
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    setData(data) {
        this.data = data;
        this.updateAllIndicators();
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    addIndicator(name, type, params = {}, options = {}) {
        try {
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º
            this.removeIndicator(name);

            // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏—é –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            const series = this._createIndicatorSeries(type, options);
            
            // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            const indicatorData = TechnicalIndicators.applyIndicator(type, this.data, params);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
            this.indicators.set(name, {
                type,
                params,
                series,
                options,
                data: indicatorData
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
            this._setIndicatorData(series, indicatorData, type);
            
            this.activeIndicators.add(name);
            
            console.log(`‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ${name} (${type}) –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
            return true;
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ ${name}:`, error);
            return false;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    removeIndicator(name) {
        if (this.indicators.has(name)) {
            const indicator = this.indicators.get(name);
            this.chart.removeSeries(indicator.series);
            this.indicators.delete(name);
            this.activeIndicators.delete(name);
            console.log(`üóëÔ∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ${name} —É–¥–∞–ª–µ–Ω`);
            return true;
        }
        return false;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    _createIndicatorSeries(type, options = {}) {
        const defaultOptions = this._getDefaultOptions(type);
        const mergedOptions = { ...defaultOptions, ...options };
        
        switch (type.toLowerCase()) {
            case 'sma':
            case 'ema':
                return this.chart.addLineSeries(mergedOptions);
                
            case 'bollinger':
            case 'bb':
                // –î–ª—è Bollinger Bands —Å–æ–∑–¥–∞–µ–º 3 –ª–∏–Ω–∏–∏
                return {
                    upper: this.chart.addLineSeries({
                        ...mergedOptions,
                        color: 'rgba(255, 0, 0, 0.7)',
                        title: 'BB Upper'
                    }),
                    middle: this.chart.addLineSeries({
                        ...mergedOptions,
                        color: 'rgba(0, 0, 255, 0.7)',
                        title: 'BB Middle'
                    }),
                    lower: this.chart.addLineSeries({
                        ...mergedOptions,
                        color: 'rgba(255, 0, 0, 0.7)',
                        title: 'BB Lower'
                    })
                };
                
            case 'macd':
                // –î–ª—è MACD —Å–æ–∑–¥–∞–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –∏ –ª–∏–Ω–∏–∏
                return {
                    macd: this.chart.addLineSeries({
                        ...mergedOptions,
                        color: 'rgba(0, 150, 255, 1)',
                        title: 'MACD'
                    }),
                    signal: this.chart.addLineSeries({
                        ...mergedOptions,
                        color: 'rgba(255, 150, 0, 1)',
                        title: 'Signal'
                    }),
                    histogram: this.chart.addHistogramSeries({
                        color: 'rgba(100, 100, 100, 0.8)',
                        title: 'MACD Histogram'
                    })
                };
                
            case 'rsi':
            case 'stochastic':
            case 'stoch':
                return this.chart.addLineSeries(mergedOptions);
                
            case 'cbma14':
                return {
                    main: this.chart.addLineSeries({
                        ...mergedOptions,
                        color: 'rgba(255, 215, 0, 1)',
                        lineWidth: 2,
                        title: 'CBMA14'
                    }),
                    signal: this.chart.addLineSeries({
                        ...mergedOptions,
                        color: 'rgba(255, 100, 100, 1)',
                        title: 'CBMA14 Signal'
                    })
                };
                
            default:
                return this.chart.addLineSeries(mergedOptions);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    _setIndicatorData(series, data, type) {
        switch (type.toLowerCase()) {
            case 'bollinger':
            case 'bb':
                if (data.upper) series.upper.setData(data.upper);
                if (data.middle) series.middle.setData(data.middle);
                if (data.lower) series.lower.setData(data.lower);
                break;
                
            case 'macd':
                if (data.macd) series.macd.setData(data.macd);
                if (data.signal) series.signal.setData(data.signal);
                if (data.histogram) series.histogram.setData(data.histogram);
                break;
                
            case 'stochastic':
            case 'stoch':
                if (data.k) series.setData(data.k);
                break;
                
            case 'cbma14':
                if (data.main) series.main.setData(data.main);
                if (data.signal) series.signal.setData(data.signal);
                break;
                
            default:
                if (Array.isArray(data)) {
                    series.setData(data);
                }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è —Ç–∏–ø–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    _getDefaultOptions(type) {
        const baseOptions = {
            lineWidth: 1,
            crosshairMarkerVisible: true,
            lastValueVisible: true,
        };
        
        switch (type.toLowerCase()) {
            case 'sma':
                return {
                    ...baseOptions,
                    color: 'rgba(0, 150, 255, 1)',
                    title: 'SMA'
                };
                
            case 'ema':
                return {
                    ...baseOptions,
                    color: 'rgba(255, 150, 0, 1)',
                    title: 'EMA'
                };
                
            case 'rsi':
                return {
                    ...baseOptions,
                    color: 'rgba(128, 0, 128, 1)',
                    title: 'RSI'
                };
                
            case 'bollinger':
            case 'bb':
                return {
                    ...baseOptions,
                    lineWidth: 1
                };
                
            case 'macd':
                return {
                    ...baseOptions,
                    lineWidth: 1
                };
                
            case 'stochastic':
            case 'stoch':
                return {
                    ...baseOptions,
                    color: 'rgba(0, 128, 0, 1)',
                    title: 'Stochastic'
                };
                
            case 'cbma14':
                return {
                    ...baseOptions,
                    lineWidth: 2
                };
                
            default:
                return baseOptions;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    updateAllIndicators() {
        for (const [name, indicator] of this.indicators) {
            try {
                const newData = TechnicalIndicators.applyIndicator(
                    indicator.type, 
                    this.data, 
                    indicator.params
                );
                
                indicator.data = newData;
                this._setIndicatorData(indicator.series, newData, indicator.type);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ ${name}:`, error);
            }
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    toggleIndicator(name) {
        if (this.activeIndicators.has(name)) {
            this.hideIndicator(name);
        } else {
            this.showIndicator(name);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    hideIndicator(name) {
        if (this.indicators.has(name)) {
            const indicator = this.indicators.get(name);
            this._setSeriesVisible(indicator.series, false);
            this.activeIndicators.delete(name);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
     */
    showIndicator(name) {
        if (this.indicators.has(name)) {
            const indicator = this.indicators.get(name);
            this._setSeriesVisible(indicator.series, true);
            this.activeIndicators.add(name);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–∏–∏
     */
    _setSeriesVisible(series, visible) {
        const visibility = visible ? 0 : 1; // 0 = visible, 1 = hidden –≤ Lightweight Charts
        
        if (series.upper && series.middle && series.lower) {
            // Bollinger Bands
            series.upper.priceScale().setMode(visibility);
            series.middle.priceScale().setMode(visibility);
            series.lower.priceScale().setMode(visibility);
        } else if (series.macd && series.signal && series.histogram) {
            // MACD
            series.macd.priceScale().setMode(visibility);
            series.signal.priceScale().setMode(visibility);
            series.histogram.priceScale().setMode(visibility);
        } else if (series.main && series.signal) {
            // CBMA14
            series.main.priceScale().setMode(visibility);
            series.signal.priceScale().setMode(visibility);
        } else {
            // –ü—Ä–æ—Å—Ç–∞—è —Å–µ—Ä–∏—è
            series.priceScale().setMode(visibility);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    getActiveIndicators() {
        return Array.from(this.activeIndicators);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    getAllIndicators() {
        return Array.from(this.indicators.keys());
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    clearAll() {
        for (const name of this.indicators.keys()) {
            this.removeIndicator(name);
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    exportSettings() {
        const settings = {};
        for (const [name, indicator] of this.indicators) {
            settings[name] = {
                type: indicator.type,
                params: indicator.params,
                options: indicator.options,
                active: this.activeIndicators.has(name)
            };
        }
        return settings;
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
     */
    importSettings(settings) {
        this.clearAll();
        
        for (const [name, config] of Object.entries(settings)) {
            this.addIndicator(name, config.type, config.params, config.options);
            
            if (!config.active) {
                this.hideIndicator(name);
            }
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = IndicatorsManager;
} else if (typeof window !== 'undefined') {
    window.IndicatorsManager = IndicatorsManager;
} 