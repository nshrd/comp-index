/**
 * UDF Datafeed Optimization
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è UDF datafeed —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π TradingView
 */

class DatafeedOptimizer {
    
    constructor() {
        this.cache = new Map();
        this.subscriptions = new Map();
        this.isInitialized = false;
        this.config = {
            cacheTimeout: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
            maxCacheSize: 100,
            batchSize: 1000,
            updateInterval: 1000 // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è real-time
        };
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
     */
    initialize() {
        try {
            this.setupCacheManagement();
            this.isInitialized = true;
            console.log('‚úÖ Datafeed Optimizer initialized');
            
        } catch (error) {
            console.error('‚ùå Datafeed Optimizer initialization failed:', error);
        }
    }

    // ==========================================
    // –ö–≠–®–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–•
    // ==========================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
     */
    setupCacheManagement() {
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        setInterval(() => {
            this.cleanExpiredCache();
        }, 10 * 60 * 1000);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
     */
    generateCacheKey(symbol, resolution, from, to) {
        return `${symbol}_${resolution}_${from}_${to}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
     */
    getFromCache(cacheKey) {
        const cached = this.cache.get(cacheKey);
        if (cached && (Date.now() - cached.timestamp) < this.config.cacheTimeout) {
            console.log(`üì¶ Cache hit: ${cacheKey}`);
            return cached.data;
        }
        return null;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫—ç—à
     */
    saveToCache(cacheKey, data) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if (this.cache.size >= this.config.maxCacheSize) {
            this.cleanOldestCache();
        }
        
        this.cache.set(cacheKey, {
            data: data,
            timestamp: Date.now()
        });
        
        console.log(`üíæ Cached: ${cacheKey} (${this.cache.size}/${this.config.maxCacheSize})`);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
     */
    cleanExpiredCache() {
        const now = Date.now();
        let cleanedCount = 0;
        
        for (const [key, value] of this.cache.entries()) {
            if (now - value.timestamp > this.config.cacheTimeout) {
                this.cache.delete(key);
                cleanedCount++;
            }
        }
        
        if (cleanedCount > 0) {
            console.log(`üßπ Cleaned expired cache: ${cleanedCount} entries`);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
     */
    cleanOldestCache() {
        let oldestKey = null;
        let oldestTime = Date.now();
        
        for (const [key, value] of this.cache.entries()) {
            if (value.timestamp < oldestTime) {
                oldestTime = value.timestamp;
                oldestKey = key;
            }
        }
        
        if (oldestKey) {
            this.cache.delete(oldestKey);
            console.log(`üóëÔ∏è Removed oldest cache entry: ${oldestKey}`);
        }
    }

    // ==========================================
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
    // ==========================================

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async optimizedGetBars(symbolInfo, resolution, from, to, onHistoryCallback, onErrorCallback, firstDataRequest) {
        try {
            const cacheKey = this.generateCacheKey(symbolInfo.name, resolution, from, to);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cachedData = this.getFromCache(cacheKey);
            if (cachedData) {
                onHistoryCallback(cachedData.bars, cachedData.meta);
                return;
            }
            
            console.log(`üìä Loading bars: ${symbolInfo.name} ${resolution} ${new Date(from * 1000).toLocaleDateString()} - ${new Date(to * 1000).toLocaleDateString()}`);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingStrategy = this.determineLoadingStrategy(symbolInfo, resolution, from, to, firstDataRequest);
            
            let barsData;
            switch (loadingStrategy.type) {
                case 'batch':
                    barsData = await this.loadDataInBatches(symbolInfo, resolution, from, to, loadingStrategy.batchSize);
                    break;
                    
                case 'progressive':
                    barsData = await this.loadDataProgressively(symbolInfo, resolution, from, to);
                    break;
                    
                case 'direct':
                default:
                    barsData = await this.loadDataDirect(symbolInfo, resolution, from, to);
                    break;
            }
            
            if (barsData && barsData.bars && barsData.bars.length > 0) {
                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                this.saveToCache(cacheKey, barsData);
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                const optimizedBars = this.optimizeBarsData(barsData.bars, resolution);
                
                onHistoryCallback(optimizedBars, barsData.meta);
                console.log(`‚úÖ Loaded ${optimizedBars.length} bars for ${symbolInfo.name}`);
            } else {
                onHistoryCallback([], { noData: true });
                console.log(`‚ö†Ô∏è No data for ${symbolInfo.name}`);
            }
            
        } catch (error) {
            console.error('‚ùå Optimized getBars error:', error);
            onErrorCallback(error.message);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    determineLoadingStrategy(symbolInfo, resolution, from, to, firstDataRequest) {
        const timeSpan = to - from;
        const days = timeSpan / (24 * 60 * 60);
        
        // –î–ª—è –±–æ–ª—å—à–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞—Ç—á–µ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É
        if (days > 365 || firstDataRequest) {
            return {
                type: 'batch',
                batchSize: Math.min(this.config.batchSize, Math.ceil(days / 10))
            };
        }
        
        // –î–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ - –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        if (days > 30) {
            return { type: 'progressive' };
        }
        
        // –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ - –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        return { type: 'direct' };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–∞–º–∏
     */
    async loadDataInBatches(symbolInfo, resolution, from, to, batchSize) {
        const allBars = [];
        const totalTimeSpan = to - from;
        const batchTimeSpan = Math.ceil(totalTimeSpan / batchSize);
        
        console.log(`üì¶ Loading in ${batchSize} batches...`);
        
        for (let i = 0; i < batchSize; i++) {
            const batchFrom = from + (i * batchTimeSpan);
            const batchTo = Math.min(from + ((i + 1) * batchTimeSpan), to);
            
            try {
                const batchData = await this.loadDataDirect(symbolInfo, resolution, batchFrom, batchTo);
                
                if (batchData && batchData.bars) {
                    allBars.push(...batchData.bars);
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                if (i < batchSize - 1) {
                    await this.delay(100);
                }
                
            } catch (error) {
                console.warn(`‚ö†Ô∏è Batch ${i + 1} failed:`, error);
            }
        }
        
        return {
            bars: allBars.sort((a, b) => a.time - b.time),
            meta: { noData: allBars.length === 0 }
        };
    }

    /**
     * –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadDataProgressively(symbolInfo, resolution, from, to) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±–∑–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–∏–∑–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        const overviewData = await this.loadDataDirect(symbolInfo, this.getOverviewResolution(resolution), from, to);
        
        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        const detailData = await this.loadDataDirect(symbolInfo, resolution, from, to);
        
        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–º
        const combinedBars = this.combineProgressiveData(overviewData?.bars || [], detailData?.bars || []);
        
        return {
            bars: combinedBars,
            meta: { noData: combinedBars.length === 0 }
        };
    }

    /**
     * –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadDataDirect(symbolInfo, resolution, from, to) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        
        const instrument = CONFIG.INSTRUMENTS[symbolInfo.name.toLowerCase()];
        if (!instrument) {
            throw new Error(`Unknown instrument: ${symbolInfo.name}`);
        }
        
        // –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
        if (instrument.dataSource === 'api') {
            return await this.loadFromAPI(instrument, resolution, from, to);
        } else {
            return await this.loadFromFile(instrument, resolution, from, to);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API
     */
    async loadFromAPI(instrument, resolution, from, to) {
        try {
            const apiUrl = `${CONFIG.API_BASE_URL}/history?symbol=${instrument.apiSymbol}&resolution=${resolution}&from=${from}&to=${to}`;
            const response = await fetch(apiUrl);
            const data = await response.json();
            
            if (data.s === 'ok' && data.t && data.o && data.h && data.l && data.c) {
                const bars = [];
                for (let i = 0; i < data.t.length; i++) {
                    bars.push({
                        time: data.t[i],
                        open: parseFloat(data.o[i]),
                        high: parseFloat(data.h[i]),
                        low: parseFloat(data.l[i]),
                        close: parseFloat(data.c[i]),
                        // volume: data.v ? parseFloat(data.v[i]) : 0
                    });
                }
                
                return { bars, meta: { noData: false } };
            }
            
            return { bars: [], meta: { noData: true } };
            
        } catch (error) {
            console.error('‚ùå API loading error:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
     */
    async loadFromFile(instrument, resolution, from, to) {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
        // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return { bars: [], meta: { noData: true } };
    }

    // ==========================================
    // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•
    // ==========================================

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞—Ä–æ–≤
     */
    optimizeBarsData(bars, resolution) {
        if (!bars || bars.length === 0) return bars;
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        const uniqueBars = this.removeDuplicateTimes(bars);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        const sortedBars = uniqueBars.sort((a, b) => a.time - b.time);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const filledBars = this.fillDataGaps(sortedBars, resolution);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        const smoothedBars = this.applySmoothingIfNeeded(filledBars, resolution);
        
        return smoothedBars;
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
     */
    removeDuplicateTimes(bars) {
        const seen = new Set();
        return bars.filter(bar => {
            if (seen.has(bar.time)) {
                return false;
            }
            seen.add(bar.time);
            return true;
        });
    }

    /**
     * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
     */
    fillDataGaps(bars, resolution) {
        if (bars.length < 2) return bars;
        
        const timeInterval = this.getTimeInterval(resolution);
        const filledBars = [bars[0]];
        
        for (let i = 1; i < bars.length; i++) {
            const prevBar = bars[i - 1];
            const currentBar = bars[i];
            const gap = currentBar.time - prevBar.time;
            
            // –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫ –±–æ–ª—å—à–µ 2 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, –∑–∞–ø–æ–ª–Ω—è–µ–º
            if (gap > timeInterval * 2) {
                const fillCount = Math.floor(gap / timeInterval) - 1;
                
                for (let j = 1; j <= fillCount && j <= 10; j++) { // –ú–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–æ–ª–Ω—è—é—â–∏—Ö –±–∞—Ä–æ–≤
                    const fillTime = prevBar.time + (j * timeInterval);
                    const fillBar = {
                        time: fillTime,
                        open: prevBar.close,
                        high: prevBar.close,
                        low: prevBar.close,
                        close: prevBar.close,
                        // volume: 0
                    };
                    filledBars.push(fillBar);
                }
            }
            
            filledBars.push(currentBar);
        }
        
        return filledBars;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    applySmoothingIfNeeded(bars, resolution) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (resolution === '1' && bars.length > 100) {
            return this.applyLightSmoothing(bars);
        }
        
        return bars;
    }

    /**
     * –õ–µ–≥–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    applyLightSmoothing(bars) {
        if (bars.length < 3) return bars;
        
        const smoothedBars = [bars[0]];
        
        for (let i = 1; i < bars.length - 1; i++) {
            const prev = bars[i - 1];
            const current = bars[i];
            const next = bars[i + 1];
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            const avgHigh = (prev.high + current.high + next.high) / 3;
            const avgLow = (prev.low + current.low + next.low) / 3;
            
            const smoothedBar = {
                ...current,
                high: Math.abs(current.high - avgHigh) > current.high * 0.05 ? avgHigh : current.high,
                low: Math.abs(current.low - avgLow) > current.low * 0.05 ? avgLow : current.low
            };
            
            smoothedBars.push(smoothedBar);
        }
        
        smoothedBars.push(bars[bars.length - 1]);
        return smoothedBars;
    }

    // ==========================================
    // REAL-TIME –ü–û–î–ü–ò–°–ö–ò
    // ==========================================

    /**
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –¥–∞–Ω–Ω—ã–µ
     */
    optimizedSubscribeBars(symbolInfo, resolution, onRealtimeCallback, subscribeUID, onResetCacheNeededCallback) {
        try {
            console.log(`üì° Subscribing to real-time: ${symbolInfo.name} ${resolution}`);
            
            const subscription = {
                symbolInfo,
                resolution,
                onRealtimeCallback,
                subscribeUID,
                onResetCacheNeededCallback,
                lastUpdate: Date.now(),
                updateInterval: this.config.updateInterval
            };
            
            this.subscriptions.set(subscribeUID, subscription);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            this.startRealtimeUpdates(subscription);
            
            console.log(`‚úÖ Real-time subscription active: ${subscribeUID}`);
            
        } catch (error) {
            console.error('‚ùå Real-time subscription error:', error);
        }
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç real-time –¥–∞–Ω–Ω—ã—Ö
     */
    optimizedUnsubscribeBars(subscribeUID) {
        try {
            const subscription = this.subscriptions.get(subscribeUID);
            if (subscription) {
                if (subscription.intervalId) {
                    clearInterval(subscription.intervalId);
                }
                this.subscriptions.delete(subscribeUID);
                console.log(`‚úÖ Real-time unsubscribed: ${subscribeUID}`);
            }
            
        } catch (error) {
            console.error('‚ùå Real-time unsubscription error:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    startRealtimeUpdates(subscription) {
        subscription.intervalId = setInterval(async () => {
            try {
                await this.fetchRealtimeUpdate(subscription);
            } catch (error) {
                console.error('‚ùå Real-time update error:', error);
            }
        }, subscription.updateInterval);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async fetchRealtimeUpdate(subscription) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è real-time –¥–∞–Ω–Ω—ã—Ö
        // –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        
        const now = Math.floor(Date.now() / 1000);
        const mockBar = {
            time: now,
            open: 50000 + Math.random() * 1000,
            high: 50000 + Math.random() * 1500,
            low: 50000 + Math.random() * 500,
            close: 50000 + Math.random() * 1000,
                                // volume: Math.random() * 100
        };
        
        subscription.onRealtimeCallback(mockBar);
        subscription.lastUpdate = Date.now();
    }

    // ==========================================
    // –£–¢–ò–õ–ò–¢–´
    // ==========================================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    getTimeInterval(resolution) {
        const intervals = {
            '1': 60,
            '5': 300,
            '15': 900,
            '60': 3600,
            '240': 14400,
            'D': 86400,
            'W': 604800
        };
        
        return intervals[resolution] || 3600;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    getOverviewResolution(resolution) {
        const overviewMap = {
            '1': '5',
            '5': '15',
            '15': '60',
            '60': '240',
            '240': 'D'
        };
        
        return overviewMap[resolution] || 'D';
    }

    /**
     * –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    combineProgressiveData(overviewBars, detailBars) {
        if (detailBars.length === 0) return overviewBars;
        if (overviewBars.length === 0) return detailBars;
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        const detailTimes = new Set(detailBars.map(bar => bar.time));
        const filteredOverview = overviewBars.filter(bar => !detailTimes.has(bar.time));
        
        return [...filteredOverview, ...detailBars].sort((a, b) => a.time - b.time);
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            isInitialized: this.isInitialized,
            cacheSize: this.cache.size,
            maxCacheSize: this.config.maxCacheSize,
            activeSubscriptions: this.subscriptions.size,
            config: this.config
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    clearAll() {
        this.cache.clear();
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        for (const subscribeUID of this.subscriptions.keys()) {
            this.optimizedUnsubscribeBars(subscribeUID);
        }
        
        console.log('‚úÖ Datafeed Optimizer cleared');
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
     */
    destroy() {
        this.clearAll();
        this.isInitialized = false;
        console.log('üóëÔ∏è Datafeed Optimizer destroyed');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = DatafeedOptimizer;
} else if (typeof window !== 'undefined') {
    window.DatafeedOptimizer = DatafeedOptimizer;
} 