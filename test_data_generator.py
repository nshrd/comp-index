#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
import json
import random


def generate_test_rankings_data(days=90):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Ç—Ä–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã
    dates = pd.date_range(start=start_date, end=end_date, freq='D')
    
    data = {}
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ä–∞–∑–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã)
    categories = {
        'coin': {'base': 200, 'volatility': 50, 'trend': 0.2},
        'moon': {'base': 150, 'volatility': 80, 'trend': -0.1}, 
        'phantom': {'base': 300, 'volatility': 60, 'trend': 0.15}
    }
    
    for category, params in categories.items():
        ranks = []
        current_rank = params['base']
        
        for i, date in enumerate(dates):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥
            trend_change = params['trend'] * i / len(dates)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            random_change = random.gauss(0, params['volatility'] / 10)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è (–Ω–µ–¥–µ–ª—å–Ω—ã–µ/–º–µ—Å—è—á–Ω—ã–µ)
            weekly_cycle = 20 * np.sin(2 * np.pi * i / 7)
            monthly_cycle = 30 * np.sin(2 * np.pi * i / 30)
            
            current_rank = (params['base'] + 
                          trend_change + 
                          random_change + 
                          weekly_cycle + 
                          monthly_cycle)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            current_rank = max(50, min(500, current_rank))
            
            ranks.append({
                'date': date.strftime('%Y-%m-%d'),
                'rank': round(current_rank, 1),
                'app_name': f'Test App {category.title()}',
                'category': category
            })
        
        data[category] = ranks
    
    return data


def save_test_data(data, output_dir='test_data'):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã JSON
    
    Args:
        data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    os.makedirs(output_dir, exist_ok=True)
    
    for category, category_data in data.items():
        filename = os.path.join(output_dir, f'{category}_rankings.json')
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(category_data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {category}: {filename}")


def create_sample_csv():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä CSV —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Pine Seeds –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    os.makedirs('data', exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(start='2024-01-01', end='2024-01-31', freq='D')
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
    base_values = np.linspace(250, 300, len(dates))
    noise = np.random.normal(0, 10, len(dates))
    composite_raw = base_values + noise
    
    # MA –≤–µ—Ä—Å–∏—è (—Å–≥–ª–∞–∂–µ–Ω–Ω–∞—è)
    composite_ma = pd.Series(composite_raw).rolling(window=7, min_periods=1).mean()
    
    # –°–æ–∑–¥–∞–µ–º COMP_RAW.csv
    comp_raw_df = pd.DataFrame({
        'time': dates.strftime('%Y-%m-%d'),
        'open': composite_raw,
        'high': composite_raw,
        'low': composite_raw,
        'close': composite_raw,
        'volume': 1000
    })
    
    comp_raw_df.to_csv('data/COMP_RAW.csv', index=False)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: data/COMP_RAW.csv")
    
    # –°–æ–∑–¥–∞–µ–º COMP_MA.csv
    comp_ma_df = pd.DataFrame({
        'time': dates.strftime('%Y-%m-%d'),
        'open': composite_ma,
        'high': composite_ma,
        'low': composite_ma,
        'close': composite_ma,
        'volume': 1000
    })
    
    comp_ma_df.to_csv('data/COMP_MA.csv', index=False)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: data/COMP_MA.csv")
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   –ü–µ—Ä–∏–æ–¥: {dates[0].strftime('%Y-%m-%d')} - {dates[-1].strftime('%Y-%m-%d')}")
    print(f"   –ó–∞–ø–∏—Å–µ–π: {len(dates)}")
    print(f"   –°—ã—Ä–æ–π –∫–æ–º–ø–æ–∑–∏—Ç: {composite_raw.min():.1f} - {composite_raw.max():.1f}")
    print(f"   MA –∫–æ–º–ø–æ–∑–∏—Ç: {composite_ma.min():.1f} - {composite_ma.max():.1f}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    test_data = generate_test_rankings_data(days=90)
    save_test_data(test_data)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã CSV —Ñ–∞–π–ª–æ–≤
    create_sample_csv()
    
    print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìù –ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:")
    print("   üìÅ test_data/ - —Ç–µ—Å—Ç–æ–≤—ã–µ JSON —Ñ–∞–π–ª—ã —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
    print("   üìÅ data/ - –ø—Ä–∏–º–µ—Ä—ã CSV —Ñ–∞–π–ª–æ–≤ –¥–ª—è Pine Seeds")
    print("\n‚ö° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    print("   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –≤ .env —Ñ–∞–π–ª–µ")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 data_processor.py")
    print("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./run_updater.sh")


if __name__ == "__main__":
    main() 