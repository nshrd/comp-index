#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ TradingView —á–µ—Ä–µ–∑ Pine Seeds
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
import json
from typing import Dict, List, Optional
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç TA-Lib
try:
    import talib
    HAS_TALIB = True
except ImportError:
    HAS_TALIB = False
    print("‚ö†Ô∏è  TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pandas –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.")


class AppRankProcessor:
    def __init__(self, api_base_url: str, api_key: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            api_base_url: –ë–∞–∑–æ–≤—ã–π URL –≤–∞—à–µ–≥–æ API
            api_key: API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
        """
        self.api_base_url = api_base_url.rstrip('/')
        self.api_key = api_key
        self.headers = {'Content-Type': 'application/json'}
        if api_key:
            self.headers['Authorization'] = f'Bearer {api_key}'
    
    def fetch_rankings_data(self) -> Dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å –≤–∞—à–µ–≥–æ API
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        endpoints = {
            'coin': '/api/rankings/coin',
            'moon': '/api/rankings/moon', 
            'phantom': '/api/rankings/phantom'
        }
        
        data = {}
        for category, endpoint in endpoints.items():
            try:
                url = f"{self.api_base_url}{endpoint}"
                response = requests.get(url, headers=self.headers, timeout=30)
                response.raise_for_status()
                data[category] = response.json()
                print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {category}: {len(data[category])} –∑–∞–ø–∏—Å–µ–π")
            except requests.exceptions.RequestException as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {category}: {e}")
                data[category] = []
        
        return data
    
    def calculate_composite_rank(self, rankings_data: Dict) -> pd.DataFrame:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        
        Args:
            rankings_data: –î–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            
        Returns:
            DataFrame —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
        """
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª—è: date, rank
        dfs = []
        
        for category, data in rankings_data.items():
            if not data:
                continue
                
            df = pd.DataFrame(data)
            if 'date' in df.columns and 'rank' in df.columns:
                df['date'] = pd.to_datetime(df['date'])
                df = df.set_index('date')
                df = df.rename(columns={'rank': f'rank_{category}'})
                dfs.append(df[[f'rank_{category}']])
        
        if not dfs:
            print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞")
            return pd.DataFrame()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –¥–∞—Ç–∞–º
        composite_df = pd.concat(dfs, axis=1, join='outer')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ—Ç–æ–¥–æ–º forward fill
        composite_df = composite_df.fillna(method='ffill')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–Ω–≥–æ–≤
        rank_columns = [col for col in composite_df.columns if col.startswith('rank_')]
        composite_df['rank_composite'] = composite_df[rank_columns].mean(axis=1)
        
        return composite_df
    
    def apply_moving_average(self, df: pd.DataFrame, ma_length: int = 30) -> pd.DataFrame:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∫ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º—É —Ä–∞–Ω–≥—É
        
        Args:
            df: DataFrame —Å –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–º —Ä–∞–Ω–≥–æ–º
            ma_length: –î–ª–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
            
        Returns:
            DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º MA
        """
        if 'rank_composite' not in df.columns:
            return df
            
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        if HAS_TALIB:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TA-Lib –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            df['rank_ma'] = talib.SMA(df['rank_composite'].values, timeperiod=ma_length)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas
            df['rank_ma'] = df['rank_composite'].rolling(window=ma_length, min_periods=1).mean()
        
        return df
    
    def create_pine_seeds_csv(self, df: pd.DataFrame, output_dir: str = 'data'):
        """
        –°–æ–∑–¥–∞–µ—Ç CSV —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Pine Seeds
        
        Args:
            df: DataFrame —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        """
        os.makedirs(output_dir, exist_ok=True)
        
        if df.empty:
            print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV —Ñ–∞–π–ª–æ–≤")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ OHLC –¥–ª—è Pine Seeds
        # time,open,high,low,close,volume
        
        # –î–ª—è –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞ (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ)
        if 'rank_composite' in df.columns:
            comp_raw = df[['rank_composite']].copy()
            comp_raw = comp_raw.dropna()
            
            # –°–æ–∑–¥–∞–µ–º OHLC —Ñ–æ—Ä–º–∞—Ç (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã rank_composite)
            comp_raw_ohlc = pd.DataFrame({
                'time': comp_raw.index.strftime('%Y-%m-%d'),
                'open': comp_raw['rank_composite'],
                'high': comp_raw['rank_composite'], 
                'low': comp_raw['rank_composite'],
                'close': comp_raw['rank_composite'],
                'volume': 1000  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–º
            })
            
            comp_raw_file = os.path.join(output_dir, 'COMP_RAW.csv')
            comp_raw_ohlc.to_csv(comp_raw_file, index=False)
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {comp_raw_file}")
        
        # –î–ª—è MA –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞
        if 'rank_ma' in df.columns:
            comp_ma = df[['rank_ma']].copy()
            comp_ma = comp_ma.dropna()
            
            comp_ma_ohlc = pd.DataFrame({
                'time': comp_ma.index.strftime('%Y-%m-%d'),
                'open': comp_ma['rank_ma'],
                'high': comp_ma['rank_ma'],
                'low': comp_ma['rank_ma'], 
                'close': comp_ma['rank_ma'],
                'volume': 1000
            })
            
            comp_ma_file = os.path.join(output_dir, 'COMP_MA.csv')
            comp_ma_ohlc.to_csv(comp_ma_file, index=False)
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {comp_ma_file}")
    
    def process_all(self, ma_length: int = 30):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            ma_length: –î–ª–∏–Ω–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
        """
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö ({datetime.now()})")
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        rankings_data = self.fetch_rankings_data()
        
        # 2. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        composite_df = self.calculate_composite_rank(rankings_data)
        
        if composite_df.empty:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return
        
        # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        composite_df = self.apply_moving_average(composite_df, ma_length)
        
        # 4. –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª—ã –¥–ª—è Pine Seeds
        self.create_pine_seeds_csv(composite_df)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({datetime.now()})")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not composite_df.empty:
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {composite_df.index.min()} - {composite_df.index.max()}")
            print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(composite_df)}")
            if 'rank_composite' in composite_df.columns:
                print(f"   –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π —Ä–∞–Ω–≥: {composite_df['rank_composite'].min():.1f} - {composite_df['rank_composite'].max():.1f}")
            if 'rank_ma' in composite_df.columns:
                print(f"   MA({ma_length}): {composite_df['rank_ma'].min():.1f} - {composite_df['rank_ma'].max():.1f}")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏)
    API_BASE_URL = "https://your-api-domain.com"  # –í–∞—à API URL
    API_KEY = os.getenv('APP_RANKINGS_API_KEY')  # API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    # –î–ª–∏–Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
    MA_LENGTH = 30
    
    try:
        processor = AppRankProcessor(API_BASE_URL, API_KEY)
        processor.process_all(MA_LENGTH)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main() 