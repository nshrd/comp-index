/**
 * TradingView TimeScale API Integration
 * –ó–∞–º–µ–Ω–∞ —Å–∞–º–æ–ø–∏—Å–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ TradingView
 */

class TimeScaleManager {
    
    constructor(chart) {
        this.chart = chart;
        this.timeScale = chart.timeScale();
        this.visibleRangeChangeListeners = new Set();
        this.isInitialized = false;
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TimeScale API
     */
    initialize() {
        try {
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            this.timeScale.subscribeVisibleTimeRangeChange(this.handleVisibleRangeChange.bind(this));
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            this.timeScale.applyOptions({
                rightOffset: 12,
                barSpacing: 6,
                minBarSpacing: 0.5,
                fixLeftEdge: false,
                fixRightEdge: false,
                lockVisibleTimeRangeOnResize: false,
                rightBarStaysOnScroll: false,
                shiftVisibleRangeOnNewBar: false,
                timeVisible: true,
                secondsVisible: false
            });
            
            this.isInitialized = true;
            console.log('‚úÖ TimeScale API initialized');
            
        } catch (error) {
            console.error('‚ùå TimeScale API initialization failed:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    handleVisibleRangeChange(newVisibleRange) {
        if (!newVisibleRange) return;
        
        console.log('üìä Visible range changed:', {
            from: new Date(newVisibleRange.from * 1000).toLocaleDateString(),
            to: new Date(newVisibleRange.to * 1000).toLocaleDateString()
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        this.visibleRangeChangeListeners.forEach(listener => {
            try {
                listener(newVisibleRange);
            } catch (error) {
                console.error('‚ùå Error in visible range change listener:', error);
            }
        });
    }

    // ==========================================
    // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ê–ì–†–ï–ì–ê–¶–ò–Ø –î–ê–ù–ù–´–•
    // ==========================================

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     * –ó–∞–º–µ–Ω—è–µ—Ç —Å–∞–º–æ–ø–∏—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ aggregateToWeeks(), aggregateToThreeDays()
     */
    autoAggregateDataByVisibleRange(data, options = {}) {
        if (!data || data.length === 0) return data;
        
        const visibleRange = this.getVisibleRange();
        if (!visibleRange) return data;
        
        const timeSpan = visibleRange.to - visibleRange.from;
        const dataPoints = this.getVisibleDataPointsCount(data, visibleRange);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        const aggregationLevel = this.determineOptimalAggregation(timeSpan, dataPoints, options);
        
        console.log(`üìä Auto-aggregation: ${aggregationLevel.level} (${dataPoints} points in ${Math.round(timeSpan / 86400)} days)`);
        
        return this.performSmartAggregation(data, aggregationLevel);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
     */
    determineOptimalAggregation(timeSpanSeconds, dataPointsCount, options = {}) {
        const days = timeSpanSeconds / 86400;
        const maxPoints = options.maxDataPoints || 500;
        const minPoints = options.minDataPoints || 50;
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
        if (dataPointsCount > maxPoints) {
            if (days > 365 * 2) {
                return { level: 'monthly', intervalSeconds: 86400 * 30 };
            } else if (days > 365) {
                return { level: 'weekly', intervalSeconds: 86400 * 7 };
            } else if (days > 90) {
                return { level: 'daily', intervalSeconds: 86400 };
            } else {
                return { level: '4hour', intervalSeconds: 14400 };
            }
        }
        
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        if (dataPointsCount < minPoints && days > 30) {
            return { level: 'hourly', intervalSeconds: 3600 };
        }
        
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º
        return { level: 'none', intervalSeconds: 0 };
    }

    /**
     * –£–º–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    performSmartAggregation(data, aggregationLevel) {
        if (aggregationLevel.level === 'none') {
            return data;
        }
        
        const aggregatedData = [];
        const intervalSeconds = aggregationLevel.intervalSeconds;
        
        const buckets = new Map();
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
        for (const item of data) {
            const bucketTime = Math.floor(item.time / intervalSeconds) * intervalSeconds;
            
            if (!buckets.has(bucketTime)) {
                buckets.set(bucketTime, []);
            }
            buckets.get(bucketTime).push(item);
        }
        
        // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π bucket
        for (const [bucketTime, bucketData] of buckets) {
            const aggregatedItem = this.aggregateBucket(bucketData, bucketTime);
            if (aggregatedItem) {
                aggregatedData.push(aggregatedItem);
            }
        }
        
        return aggregatedData.sort((a, b) => a.time - b.time);
    }

    /**
     * –ê–≥—Ä–µ–≥–∞—Ü–∏—è bucket –¥–∞–Ω–Ω—ã—Ö
     */
    aggregateBucket(bucketData, bucketTime) {
        if (!bucketData || bucketData.length === 0) return null;
        
        const result = { time: bucketTime };
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        bucketData.sort((a, b) => a.time - b.time);
        
        // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (—Å—Ä–µ–¥–Ω–µ–µ)
        if (bucketData[0].value !== undefined) {
            const values = bucketData.map(item => item.value).filter(v => !isNaN(v));
            if (values.length > 0) {
                result.value = values.reduce((sum, val) => sum + val, 0) / values.length;
            }
        }
        
        // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
        if (bucketData[0].open !== undefined) {
            const ohlcData = bucketData.filter(item => 
                item.open !== undefined && 
                item.high !== undefined && 
                item.low !== undefined && 
                item.close !== undefined
            );
            
            if (ohlcData.length > 0) {
                result.open = ohlcData[0].open;
                result.high = Math.max(...ohlcData.map(item => item.high));
                result.low = Math.min(...ohlcData.map(item => item.low));
                result.close = ohlcData[ohlcData.length - 1].close;
            }
        }
        
        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–∏–º—ã—Ö —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö
     */
    getVisibleDataPointsCount(data, visibleRange) {
        if (!visibleRange) return data.length;
        
        return data.filter(item => 
            item.time >= visibleRange.from && item.time <= visibleRange.to
        ).length;
    }

    // ==========================================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ò–î–ò–ú–´–ú –î–ò–ê–ü–ê–ó–û–ù–û–ú
    // ==========================================

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
     */
    setVisibleRange(from, to) {
        try {
            this.timeScale.setVisibleRange({ from, to });
            console.log(`üìä Visible range set: ${new Date(from * 1000).toLocaleDateString()} - ${new Date(to * 1000).toLocaleDateString()}`);
            return true;
        } catch (error) {
            console.error('‚ùå Error setting visible range:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–∏–¥–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
     */
    getVisibleRange() {
        try {
            return this.timeScale.getVisibleRange();
        } catch (error) {
            console.error('‚ùå Error getting visible range:', error);
            return null;
        }
    }

    /**
     * –ü–æ–¥–æ–≥–Ω–∞—Ç—å –≤—Å–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
     */
    fitContent() {
        try {
            this.timeScale.fitContent();
            console.log('üìä Content fitted to visible area');
            return true;
        } catch (error) {
            console.error('‚ùå Error fitting content:', error);
            return false;
        }
    }

    /**
     * –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
     */
    resetTimeScale() {
        try {
            if (this.timeScale.resetTimeScale) {
                this.timeScale.resetTimeScale();
            } else {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
                this.timeScale.fitContent();
            }
            console.log('üîÑ TimeScale reset');
            return true;
        } catch (error) {
            console.error('‚ùå Error resetting time scale:', error);
            return false;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º N –¥–Ω—è–º
     */
    setLastNDays(days) {
        const now = Math.floor(Date.now() / 1000);
        const from = now - (days * 24 * 60 * 60);
        return this.setVisibleRange(from, now);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º N –º–µ—Å—è—Ü–∞–º
     */
    setLastNMonths(months) {
        const now = new Date();
        const from = new Date(now);
        from.setMonth(from.getMonth() - months);
        
        return this.setVisibleRange(
            Math.floor(from.getTime() / 1000),
            Math.floor(now.getTime() / 1000)
        );
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ –≥–æ–¥—É
     */
    setYear(year) {
        const from = Math.floor(new Date(year, 0, 1).getTime() / 1000);
        const to = Math.floor(new Date(year + 1, 0, 1).getTime() / 1000) - 1;
        return this.setVisibleRange(from, to);
    }

    // ==========================================
    // –°–û–ë–´–¢–ò–Ø –ò –ü–û–î–ü–ò–°–ö–ò
    // ==========================================

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    addVisibleRangeChangeListener(listener) {
        this.visibleRangeChangeListeners.add(listener);
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    removeVisibleRangeChangeListener(listener) {
        this.visibleRangeChangeListeners.delete(listener);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
     */
    clearVisibleRangeChangeListeners() {
        this.visibleRangeChangeListeners.clear();
    }

    // ==========================================
    // –£–¢–ò–õ–ò–¢–´ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    // ==========================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
     */
    getTimeScaleInfo() {
        const visibleRange = this.getVisibleRange();
        if (!visibleRange) return null;
        
        const timeSpan = visibleRange.to - visibleRange.from;
        const days = Math.round(timeSpan / 86400);
        
        return {
            visibleRange,
            timeSpanSeconds: timeSpan,
            timeSpanDays: days,
            from: new Date(visibleRange.from * 1000),
            to: new Date(visibleRange.to * 1000),
            isInitialized: this.isInitialized
        };
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
     */
    optimizeDataForCurrentRange(data, options = {}) {
        const info = this.getTimeScaleInfo();
        if (!info) return data;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–¥–∏–º–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –±—É—Ñ–µ—Ä–æ–º
        const bufferSeconds = options.bufferSeconds || 86400; // 1 –¥–µ–Ω—å –±—É—Ñ–µ—Ä
        const filteredData = data.filter(item => 
            item.time >= (info.visibleRange.from - bufferSeconds) && 
            item.time <= (info.visibleRange.to + bufferSeconds)
        );
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é
        return this.autoAggregateDataByVisibleRange(filteredData, options);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.clearVisibleRangeChangeListeners();
        this.isInitialized = false;
        console.log('üóëÔ∏è TimeScale Manager destroyed');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = TimeScaleManager;
} else if (typeof window !== 'undefined') {
    window.TimeScaleManager = TimeScaleManager;
} 