/**
 * Performance Optimizations for Lightweight Charts
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */

class PerformanceOptimizations {
    
    constructor(chart) {
        this.chart = chart;
        this.viewportConfig = {
            maxVisibleDataPoints: 1000,
            bufferSize: 100,
            lazyLoading: true,
            memoryLimit: 200 * 1024 * 1024 // 200MB
        };
        this.dataCache = new Map();
        this.memoryUsage = 0;
        this.isInitialized = false;
        this.initialize();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    initialize() {
        try {
            this.setupViewportOptimization();
            this.setupMemoryManagement();
            this.isInitialized = true;
            console.log('‚úÖ Performance Optimizations initialized');
            
        } catch (error) {
            console.error('‚ùå Performance Optimizations initialization failed:', error);
        }
    }

    // ==========================================
    // VIEWPORT OPTIMIZATION
    // ==========================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ viewport
     */
    setupViewportOptimization() {
        try {
            this.chart.applyOptions({
                handleScroll: {
                    mouseWheel: true,
                    pressedMouseMove: true,
                    horzTouchDrag: true,
                    vertTouchDrag: false
                },
                handleScale: {
                    mouseWheel: true,
                    pinch: true,
                    axisPressedMouseMove: {
                        time: true,
                        price: true
                    }
                },
                kineticScroll: {
                    touch: true,
                    mouse: false
                }
            });
            
            console.log('‚úÖ Viewport optimization configured');
            
        } catch (error) {
            console.error('‚ùå Viewport optimization failed:', error);
        }
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ viewport
     */
    optimizeDataForViewport(data, seriesType = 'line') {
        if (!Array.isArray(data) || data.length === 0) {
            return data;
        }

        try {
            const timeScale = this.chart.timeScale();
            const visibleRange = timeScale.getVisibleRange();
            
            if (!visibleRange) {
                return this.decimateData(data, this.viewportConfig.maxVisibleDataPoints);
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∏–¥–∏–º–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É —Å –±—É—Ñ–µ—Ä–æ–º
            const bufferTime = (visibleRange.to - visibleRange.from) * 0.1;
            const filteredData = data.filter(point => 
                point.time >= (visibleRange.from - bufferTime) && 
                point.time <= (visibleRange.to + bufferTime)
            );

            // –î–µ—Ü–∏–º–∞—Ü–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            if (filteredData.length > this.viewportConfig.maxVisibleDataPoints) {
                return this.decimateData(filteredData, this.viewportConfig.maxVisibleDataPoints);
            }

            return filteredData;
            
        } catch (error) {
            console.error('‚ùå Viewport data optimization failed:', error);
            return data;
        }
    }

    /**
     * –î–µ—Ü–∏–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
     */
    decimateData(data, targetPoints) {
        if (data.length <= targetPoints) {
            return data;
        }

        const step = Math.floor(data.length / targetPoints);
        const decimated = [];
        
        for (let i = 0; i < data.length; i += step) {
            decimated.push(data[i]);
        }
        
        // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
        if (decimated[decimated.length - 1] !== data[data.length - 1]) {
            decimated.push(data[data.length - 1]);
        }
        
        console.log(`‚úÖ Data decimated: ${data.length} ‚Üí ${decimated.length} points`);
        return decimated;
    }

    // ==========================================
    // MEMORY MANAGEMENT
    // ==========================================

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
     */
    setupMemoryManagement() {
        try {
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            this.startMemoryMonitoring();
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
            setInterval(() => {
                this.cleanupCache();
            }, 300000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (–±—ã–ª–æ 60000 - 1 –º–∏–Ω—É—Ç–∞)
            
            console.log('‚úÖ Memory management configured');
            
        } catch (error) {
            console.error('‚ùå Memory management setup failed:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
     */
    startMemoryMonitoring() {
        if (typeof window !== 'undefined' && window.performance && window.performance.memory) {
            setInterval(() => {
                const memory = window.performance.memory;
                this.memoryUsage = memory.usedJSHeapSize;
                
                // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏, –æ—á–∏—â–∞–µ–º –∫–µ—à
                if (this.memoryUsage > this.viewportConfig.memoryLimit) {
                    console.warn('‚ö†Ô∏è Memory limit exceeded, cleaning old cache entries');
                    this.cleanupCache(); // –º—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π
                }
            }, 60000); // –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 10 —Å–µ–∫—É–Ω–¥)
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    cleanupCache() {
        const now = Date.now();
        const maxAge = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
        
        let cleanedCount = 0;
        
        for (const [key, value] of this.dataCache.entries()) {
            if (now - value.timestamp > maxAge) {
                this.dataCache.delete(key);
                cleanedCount++;
            }
        }
        
        if (cleanedCount > 0) {
            console.log(`‚úÖ Cache cleaned: ${cleanedCount} items removed`);
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    forceCleanupCache() {
        const size = this.dataCache.size;
        this.dataCache.clear();
        console.log(`‚úÖ Cache force cleaned: ${size} items removed`);
    }

    // ==========================================
    // DATA CACHING
    // ==========================================

    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    cacheData(key, data) {
        try {
            this.dataCache.set(key, {
                data: data,
                timestamp: Date.now(),
                size: this.estimateDataSize(data)
            });
            
        } catch (error) {
            console.error('‚ùå Data caching failed:', error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç—à–∞
     */
    getCachedData(key) {
        const cached = this.dataCache.get(key);
        
        if (cached) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å
            const maxAge = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
            if (Date.now() - cached.timestamp < maxAge) {
                return cached.data;
            } else {
                this.dataCache.delete(key);
            }
        }
        
        return null;
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
     */
    estimateDataSize(data) {
        try {
            return JSON.stringify(data).length * 2; // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        } catch (error) {
            return 0;
        }
    }

    // ==========================================
    // LAZY LOADING
    // ==========================================

    /**
     * –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É
     */
    async loadDataLazily(dataProvider, timeRange, options = {}) {
        if (!this.viewportConfig.lazyLoading) {
            return await dataProvider(timeRange);
        }

        try {
            const cacheKey = `lazy_${timeRange.from}_${timeRange.to}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cached = this.getCachedData(cacheKey);
            if (cached) {
                console.log('‚úÖ Lazy loading: data from cache');
                return cached;
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
            console.log('üîÑ Lazy loading: fetching data...');
            const data = await dataProvider(timeRange);
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è viewport
            const optimized = this.optimizeDataForViewport(data);
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.cacheData(cacheKey, optimized);
            
            console.log(`‚úÖ Lazy loading completed: ${data.length} ‚Üí ${optimized.length} points`);
            return optimized;
            
        } catch (error) {
            console.error('‚ùå Lazy loading failed:', error);
            throw error;
        }
    }

    // ==========================================
    // PERFORMANCE MONITORING
    // ==========================================

    /**
     * –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    measurePerformance(name, operation) {
        return new Promise((resolve, reject) => {
            const startTime = performance.now();
            
            try {
                const result = operation();
                
                if (result instanceof Promise) {
                    result.then(value => {
                        const endTime = performance.now();
                        console.log(`‚è±Ô∏è ${name}: ${(endTime - startTime).toFixed(2)}ms`);
                        resolve(value);
                    }).catch(reject);
                } else {
                    const endTime = performance.now();
                    console.log(`‚è±Ô∏è ${name}: ${(endTime - startTime).toFixed(2)}ms`);
                    resolve(result);
                }
                
            } catch (error) {
                reject(error);
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    getPerformanceMetrics() {
        const metrics = {
            memoryUsage: this.memoryUsage,
            cacheSize: this.dataCache.size,
            isInitialized: this.isInitialized
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if (typeof window !== 'undefined' && window.performance) {
            if (window.performance.memory) {
                metrics.browserMemory = {
                    used: window.performance.memory.usedJSHeapSize,
                    total: window.performance.memory.totalJSHeapSize,
                    limit: window.performance.memory.jsHeapSizeLimit
                };
            }
            
            if (window.performance.timing) {
                metrics.pageLoadTime = window.performance.timing.loadEventEnd - 
                                     window.performance.timing.navigationStart;
            }
        }

        return metrics;
    }

    // ==========================================
    // BATCH OPERATIONS
    // ==========================================

    /**
     * –ë–∞—Ç—á–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async processBatch(data, batchSize, processor) {
        const results = [];
        const totalBatches = Math.ceil(data.length / batchSize);
        
        for (let i = 0; i < totalBatches; i++) {
            const start = i * batchSize;
            const end = Math.min(start + batchSize, data.length);
            const batch = data.slice(start, end);
            
            try {
                const result = await processor(batch, i, totalBatches);
                results.push(result);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI
                if (i < totalBatches - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1));
                }
                
            } catch (error) {
                console.error(`‚ùå Batch ${i + 1}/${totalBatches} failed:`, error);
                throw error;
            }
        }
        
        console.log(`‚úÖ Batch processing completed: ${totalBatches} batches`);
        return results.flat();
    }

    // ==========================================
    // CONFIGURATION
    // ==========================================

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    updateConfig(config) {
        this.viewportConfig = { ...this.viewportConfig, ...config };
        console.log('‚öôÔ∏è Performance config updated:', this.viewportConfig);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return {
            isInitialized: this.isInitialized,
            config: this.viewportConfig,
            metrics: this.getPerformanceMetrics()
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        this.forceCleanupCache();
        this.isInitialized = false;
        console.log('üóëÔ∏è Performance Optimizations destroyed');
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PerformanceOptimizations;
} else if (typeof window !== 'undefined') {
    window.PerformanceOptimizations = PerformanceOptimizations;
} 