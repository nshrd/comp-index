#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã Docker –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è CBMA14 Index –ø—Ä–æ–µ–∫—Ç–∞
"""

import unittest
import subprocess
import time
import requests
import json
import os
from pathlib import Path


class TestDockerIntegration(unittest.TestCase):
    """–¢–µ—Å—Ç—ã Docker —Å–±–æ—Ä–∫–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    @classmethod
    def setUpClass(cls):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏"""
        cls.project_root = Path(__file__).parent.parent
        cls.base_url = "http://localhost"
        cls.udf_port = "8000"
        cls.nginx_port = "80"
        cls.containers_started = False
        
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.addCleanup(self._cleanup_containers)
        
    def _cleanup_containers(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        try:
            subprocess.run(
                ["docker", "compose", "down", "-v", "--remove-orphans"],
                cwd=self.project_root,
                capture_output=True
            )
        except Exception:
            pass
    
    def _run_command(self, cmd, cwd=None, timeout=30):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        if cwd is None:
            cwd = self.project_root
            
        try:
            result = subprocess.run(
                cmd,
                cwd=cwd,
                capture_output=True,
                text=True,
                timeout=timeout
            )
            return result
        except subprocess.TimeoutExpired:
            self.fail(f"–ö–æ–º–∞–Ω–¥–∞ {' '.join(cmd)} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç {timeout}—Å")
    
    def test_dockerfile_builder_exists(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Dockerfile.builder"""
        dockerfile_path = self.project_root / "Dockerfile.builder"
        self.assertTrue(dockerfile_path.exists(), "Dockerfile.builder –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        content = dockerfile_path.read_text()
        self.assertIn("FROM python:", content, "–î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑")
        self.assertIn("COPY requirements.txt", content, "–î–æ–ª–∂–µ–Ω –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å requirements.txt")
        self.assertIn("RUN pip install", content, "–î–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    
    def test_dockerfile_udf_exists(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è Dockerfile.udf"""
        dockerfile_path = self.project_root / "Dockerfile.udf"
        self.assertTrue(dockerfile_path.exists(), "Dockerfile.udf –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
        
        content = dockerfile_path.read_text()
        self.assertIn("FROM python:", content, "–î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑")
        self.assertIn("COPY src/", content, "–î–æ–ª–∂–µ–Ω –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥")
        self.assertIn("HEALTHCHECK", content, "–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å healthcheck")
    
    def test_docker_compose_file_exists(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ docker-compose.yml"""
        compose_path = self.project_root / "docker-compose.yml"
        self.assertTrue(compose_path.exists(), "docker-compose.yml –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å")
        
        content = compose_path.read_text()
        self.assertIn("builder:", content, "–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–≤–∏—Å builder")
        self.assertIn("udf:", content, "–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–≤–∏—Å udf")
        self.assertIn("nginx:", content, "–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–≤–∏—Å nginx")
    
    def test_docker_images_build(self):
        """–¢–µ—Å—Ç: —Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤"""
        print("\nüî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤...")
        
        # –°–±–æ—Ä–∫–∞ builder –æ–±—Ä–∞–∑–∞
        result = self._run_command([
            "docker", "build", 
            "-f", "Dockerfile.builder",
            "-t", "cbma14-builder:test",
            "."
        ], timeout=120)
        
        self.assertEqual(result.returncode, 0, 
                        f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ builder –æ–±—Ä–∞–∑–∞:\n{result.stderr}")
        
        # –°–±–æ—Ä–∫–∞ UDF –æ–±—Ä–∞–∑–∞
        result = self._run_command([
            "docker", "build",
            "-f", "Dockerfile.udf", 
            "-t", "cbma14-udf:test",
            "."
        ], timeout=120)
        
        self.assertEqual(result.returncode, 0,
                        f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ UDF –æ–±—Ä–∞–∑–∞:\n{result.stderr}")
        
        print("‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    def test_docker_compose_up(self):
        """–¢–µ—Å—Ç: –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose"""
        print("\nüöÄ –ó–∞–ø—É—Å–∫ docker-compose...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        self._run_command(["docker", "compose", "down", "-v"])
        
        # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        result = self._run_command([
            "docker", "compose", "up", "-d", "--build"
        ], timeout=180)
        
        self.assertEqual(result.returncode, 0,
                        f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ docker-compose:\n{result.stderr}")
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        time.sleep(15)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        result = self._run_command(["docker", "compose", "ps", "--format", "json"])
        if result.returncode == 0:
            try:
                containers = [json.loads(line) for line in result.stdout.strip().split('\n') if line]
                running_containers = [c for c in containers if 'running' in c.get('State', '').lower()]
                self.assertGreater(len(running_containers), 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
                print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(running_containers)}")
            except json.JSONDecodeError:
                self.fail("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
        
        self.__class__.containers_started = True
    
    def test_udf_service_health(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è UDF —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.containers_started:
            self.skipTest("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
        
        print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è UDF —Å–µ—Ä–≤–∏—Å–∞...")
        
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        max_attempts = 30
        for attempt in range(max_attempts):
            try:
                response = requests.get(f"{self.base_url}:{self.udf_port}/status", timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    self.assertIn('status', data)
                    self.assertEqual(data['status'], 'healthy')
                    print("‚úÖ UDF —Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤")
                    return
            except requests.exceptions.RequestException:
                pass
            
            time.sleep(2)
        
        self.fail("UDF —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
    
    def test_nginx_service_accessibility(self):
        """–¢–µ—Å—Ç: –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ Nginx"""
        if not self.containers_started:
            self.skipTest("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã") 
        
        print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Nginx...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        max_attempts = 20
        for attempt in range(max_attempts):
            try:
                response = requests.get(f"{self.base_url}:{self.nginx_port}/", timeout=5)
                if response.status_code == 200:
                    self.assertIn('text/html', response.headers.get('content-type', ''))
                    print("‚úÖ Nginx –¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
            except requests.exceptions.RequestException:
                pass
            
            time.sleep(2)
        
        self.fail("Nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ 40 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        if not self.containers_started:
            self.skipTest("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
        
        print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        endpoints_to_test = [
            ("/config", 200),
            ("/search", 200),
            ("/history", 200),
            ("/get_cbma14_history", 200)
        ]
        
        for endpoint, expected_status in endpoints_to_test:
            with self.subTest(endpoint=endpoint):
                try:
                    response = requests.get(
                        f"{self.base_url}:{self.udf_port}{endpoint}",
                        timeout=10
                    )
                    self.assertEqual(response.status_code, expected_status,
                                   f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è {endpoint}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                    if endpoint != "/":
                        try:
                            response.json()
                        except json.JSONDecodeError:
                            self.fail(f"–≠–Ω–¥–ø–æ–∏–Ω—Ç {endpoint} –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON")
                    
                    print(f"‚úÖ {endpoint} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    
                except requests.exceptions.RequestException as e:
                    self.fail(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}")
    
    def test_data_processing_integration(self):
        """–¢–µ—Å—Ç: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.containers_started:
            self.skipTest("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
        
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ CBMA14
            response = requests.get(
                f"{self.base_url}:{self.udf_port}/get_cbma14_history",
                params={"symbol": "BTC", "limit": 100},
                timeout=15
            )
            
            self.assertEqual(response.status_code, 200, "API –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 200")
            
            data = response.json()
            self.assertIn('data', data, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'data'")
            
            if data['data'] != "no_data":
                self.assertIsInstance(data['data'], list, "–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
                if len(data['data']) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    first_item = data['data'][0]
                    self.assertIn('time', first_item, "–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'time'")
                    self.assertIn('value', first_item, "–ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'value'")
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except requests.exceptions.RequestException as e:
            self.fail(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def test_environment_variables(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞ –∏–ª–∏ env.example
        env_file = self.project_root / ".env"
        env_example = self.project_root / "env.example"
        
        self.assertTrue(
            env_file.exists() or env_example.exists(),
            "–î–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å .env –∏–ª–∏ env.example —Ñ–∞–π–ª"
        )
        
        if env_example.exists():
            content = env_example.read_text()
            required_vars = ["COINGLASS_API_KEY", "UDF_HOST", "UDF_PORT"]
            
            for var in required_vars:
                self.assertIn(var, content, f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {var} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ env.example")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    def test_docker_compose_profiles(self):
        """–¢–µ—Å—Ç: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π docker-compose"""
        print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π docker-compose...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ —Å nginx –ø—Ä–æ—Ñ–∏–ª–µ–º
        result = self._run_command([
            "docker", "compose", "--profile", "nginx", "config"
        ])
        
        self.assertEqual(result.returncode, 0, 
                        f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ nginx –ø—Ä–æ—Ñ–∏–ª—è:\n{result.stderr}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –µ—Å—Ç—å –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        config_output = result.stdout
        self.assertIn("nginx:", config_output, "Nginx —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        self.assertIn("udf:", config_output, "UDF —Å–µ—Ä–≤–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
        
        print("‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ docker-compose –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤
    unittest.main(verbosity=2, buffer=True) 